---
/**
 * Hero.astro
 * - Layout: testo SX, immagine DX (su mobile immagine sopra)
 * - Evita CLS: richiede width/height se `image.src` è in /public
 * - Supporta ESM import (src/assets) oppure stringa (public) con width/height
 * - Gradient opzionale coerente col brand
 */

import Button from '@/components/ui/Button.astro';

type Action = { text: string; href: string; variant?: 'primary' | 'secondary' | 'ghost'; class?: string };

export interface Props {
  tagline?: string;
  /** slot="title" (HTML) */
  /** slot="subtitle" (HTML) */
  actions?: Action[];
  image?: {
    src: any;          // ESM import (recommended) oppure string path (/images/...)
    alt: string;
    width?: number;    // obbligatorio se src è string
    height?: number;   // obbligatorio se src è string
    style?: string;
    class?: string;
    fetchpriority?: 'high' | 'auto' | 'low';
    loading?: 'eager' | 'lazy';
    decoding?: 'async' | 'auto' | 'sync';
  };
  gradient?: boolean;
  gradientClass?: string;
}

const {
  tagline,
  actions = [],
  image,
  gradient = true,
  gradientClass = 'from-violet-600/15 via-fuchsia-500/10 to-transparent dark:from-violet-500/25 dark:via-fuchsia-400/15',
} = Astro.props;

const isEsm = image && typeof image.src === 'object' && 'src' in image.src;
const imgSrc = isEsm ? image!.src.src : image?.src;
const imgW   = isEsm ? image!.src.width  : image?.width;
const imgH   = isEsm ? image!.src.height : image?.height;

if (image && !isEsm && (!imgW || !imgH)) {
  console.warn('[Hero] For non-ESM images you must provide width and height to avoid CLS.');
}
---

<section class="relative isolate overflow-hidden">
  {gradient && (
    <div aria-hidden="true" class={`pointer-events-none absolute inset-x-0 top-0 -z-10 h-[360px] sm:h-[420px] md:h-[460px] bg-gradient-to-b ${gradientClass}`} />
  )}

  <div class="container mx-auto px-6 md:px-8 pt-10 md:pt-14 pb-8">
    <div class="grid lg:grid-cols-2 gap-8 md:gap-10 items-center">
      <!-- Testo -->
      <div>
        {tagline && <p class="mb-2 text-xs font-semibold uppercase tracking-wide text-indigo-700/90 dark:text-indigo-300">{tagline}</p>}

      <h1
  class="text-3xl sm:text-5xl md:text-6xl font-extrabold
         leading-[1.18] sm:leading-[1.14] md:leading-[1.10]   /* ← più aria ai discendenti */
         pb-0.5                                              /* ← piccolo padding sotto */
         tracking-tight"
>
  <slot name="title" />
</h1>

        <p class="mt-3 text-base md:text-lg text-neutral-700 dark:text-neutral-300 max-w-prose">
          <slot name="subtitle" />
        </p>

        {actions.length > 0 && (
          <div class="mt-5 flex flex-wrap gap-3">
            {actions.map((a) => (
              <Button href={a.href} variant={a.variant ?? 'secondary'} class={a.class ?? ''}>
                {a.text}
              </Button>
            ))}
          </div>
        )}
      </div>

      <!-- Immagine -->
      {image && (
        <div class="relative flex lg:justify-end order-first lg:order-none">
          <img
            src={imgSrc}
            alt={image.alt}
            width={imgW}
            height={imgH}
            loading={image.loading ?? 'eager'}
            decoding={image.decoding ?? 'async'}
            fetchpriority={image.fetchpriority ?? 'high'}
            style={image.style}
            class={`rounded-2xl shadow-lg ring-1 ring-neutral-200 dark:ring-neutral-800 object-cover ${image.class ?? 'w-[88%] md:w-[84%] lg:w-[78%] max-w-[680px]'}`}
          />
        </div>
      )}
    </div>
  </div>
</section>