---
/* ChatWidget.astro – LS Web Agency (gate Nome+Email, WA/TG, autoreplies + lead intent) */

const {
  PUBLIC_CHAT_ENABLED = 'true',
  PUBLIC_CHAT_BADGE = 'Chatta con noi',
  PUBLIC_CHAT_GREETING = 'Ciao! 👋 Sono l’assistente LS. Scrivimi pure una domanda.',
  PUBLIC_CHAT_SLA_MINUTES = '30',
  PUBLIC_CHAT_WORK_HOURS = 'Mon-Fri 09:30-18:30 Europe/Rome',
  PUBLIC_CHAT_CHANNELS = 'web,whatsapp',
  PUBLIC_CHAT_REQUIRE_EMAIL = 'true',

  PUBLIC_WHATSAPP_NUMBER = '',
  PUBLIC_WHATSAPP_GREETING = 'Ciao LS Web Agency, vorrei informazioni sui servizi.',
  PUBLIC_TELEGRAM_LINK = '',
} = import.meta.env;

const CHANNELS = String(PUBLIC_CHAT_CHANNELS || '').split(',').map((s) => s.trim());
const canWeb = CHANNELS.includes('web');
const canWa  = CHANNELS.includes('whatsapp');

const waHref = PUBLIC_WHATSAPP_NUMBER
  ? `https://wa.me/${PUBLIC_WHATSAPP_NUMBER}?text=${encodeURIComponent(PUBLIC_WHATSAPP_GREETING)}`
  : null;
const tgHref = PUBLIC_TELEGRAM_LINK || null;

const WIDGET_ID = 'ls-chat-widget';
---

{PUBLIC_CHAT_ENABLED === 'true' && (
  <div id={WIDGET_ID} class="z-[60] fixed bottom-4 right-4 md:bottom-6 md:right-6">
    <!-- FAB -->
    <button
      id="ls-chat-toggle"
      type="button"
      class="rounded-full px-4 py-3 shadow-lg bg-violet-600 text-white font-semibold hover:bg-violet-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-violet-300"
      aria-haspopup="dialog"
      aria-controls="ls-chat-panel"
    >
      {PUBLIC_CHAT_BADGE}
    </button>

    <!-- PANEL -->
    <div
      id="ls-chat-panel"
      data-open="false"
      data-wa={waHref || ''}
      data-tg={tgHref || ''}
      class="hidden w-[92vw] max-w-[390px] mt-3 rounded-2xl border border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900 shadow-xl overflow-hidden"
      role="dialog"
      aria-modal="true"
      aria-labelledby="ls-chat-title"
    >
      <!-- Header -->
      <div class="p-4 border-b border-neutral-200 dark:border-neutral-800 flex items-start gap-3">
        <div class="shrink-0 w-10 h-10 rounded-full bg-gradient-to-br from-violet-600 to-fuchsia-500"></div>
        <div class="min-w-0">
          <h3 id="ls-chat-title" class="font-semibold leading-tight">LS Web Agency</h3>
          <p class="text-sm text-neutral-600 dark:text-neutral-400">{PUBLIC_CHAT_GREETING}</p>
          <p class="mt-1 text-xs text-neutral-500">
            Risposta entro ~{PUBLIC_CHAT_SLA_MINUTES} min · {PUBLIC_CHAT_WORK_HOURS}
          </p>
        </div>
        <button
          type="button"
          id="ls-chat-close"
          class="ml-auto p-2 rounded hover:bg-neutral-100 dark:hover:bg-neutral-800"
          aria-label="Chiudi chat"
        >
          ✕
        </button>
      </div>

      <!-- Gate: nome+email -->
      <div id="ls-gate" class="p-4 space-y-3 hidden">
        <div>
          <label class="text-sm font-medium">Nome*</label>
          <input
            id="ls-name"
            required
            class="mt-1 w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2"
          />
        </div>
        <div>
          <label class="text-sm font-medium">Email*</label>
          <input
            id="ls-email"
            type="email"
            required
            class="mt-1 w-full rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2"
          />
        </div>
        <button
          id="ls-save-profile"
          class="w-full inline-flex items-center justify-center rounded-lg bg-violet-600 text-white px-4 py-2.5 font-semibold hover:bg-violet-700"
        >
          Inizia la chat
        </button>
        <p class="text-xs text-neutral-500">
          Iniziando accetti la nostra <a href="/privacy" class="underline">Privacy & Cookie Policy</a>.
        </p>
      </div>

      <!-- Corpo chat -->
      <div id="ls-chat-body" class="flex flex-col">
        <div id="ls-messages" class="p-4 space-y-3 max-h-[55vh] overflow-y-auto"></div>

        <!-- Canali rapidi -->
        {(canWa || tgHref) && (
          <div class="px-4 pb-2 flex gap-2">
            {canWa && waHref && (
              <a
                href={waHref}
                target="_blank"
                rel="noopener nofollow"
                class="flex-1 inline-flex items-center justify-center gap-2 rounded-xl bg-emerald-600 text-white font-medium px-3 py-2.5 hover:bg-emerald-700"
              >
                WhatsApp
              </a>
            )}
            {tgHref && (
              <a
                href={tgHref}
                target="_blank"
                rel="noopener nofollow"
                class="flex-1 inline-flex items-center justify-center gap-2 rounded-xl bg-sky-600 text-white font-medium px-3 py-2.5 hover:bg-sky-700"
              >
                Telegram
              </a>
            )}
          </div>
        )}

        <!-- Composer -->
        {canWeb && (
          <form id="ls-composer" class="p-3 border-t border-neutral-200 dark:border-neutral-800 flex gap-2">
            <input
              id="ls-input"
              autocomplete="off"
              placeholder="Scrivi qui la tua domanda…"
              class="flex-1 rounded-lg border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 px-3 py-2"
            />
            <button class="rounded-lg bg-violet-600 text-white px-4 py-2 font-semibold hover:bg-violet-700">Invia</button>
          </form>
        )}
      </div>
    </div>
  </div>
)}

<style is:global>
  .ls-bot { background: #f6f6f7; color: #111; }
  .dark .ls-bot { background: #15171a; color: #e5e7eb; }
  .ls-you { background: #6d28d9; color: #fff; }
  .ls-bubble { border-radius: 14px; padding: 10px 12px; max-width: 85%; }
</style>

<script is:inline>
  // ===== Store persistente =====
  const STORE_KEY = 'ls_chat_state_v2';
  const STORE = { open: false, profile: null, messages: [] };
  const persist = () => { try { localStorage.setItem(STORE_KEY, JSON.stringify(STORE)); } catch {} };
  try { Object.assign(STORE, JSON.parse(localStorage.getItem(STORE_KEY) || '{}')); } catch {}

  // ===== Utils =====
  const norm = (s='') => s.toLowerCase().normalize('NFD').replace(/\p{Diacritic}/gu,'');
  const mqMobile = window.matchMedia('(max-width: 767px)');
  const isMobile = () => mqMobile.matches;
  const esc = (s='') => s.replace(/[&<>"]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));

  // ===== Autoreply =====
  function autoReply(q = '') {
    const t = norm(q);

    const URL_SITI   = '/servizi/creazione-siti-web-sassari#pacchetti';
    const URL_ECOM   = '/servizi/realizzazione-siti-ecommerce#pacchetti';
    const URL_BRAND  = '/servizi/branding-e-grafica-siti-web';

    const hasEcom  = /(e-?commerce|ecommerce|shop|negozio|carrello|checkout|woocommerce|catalogo|prodott)/.test(t);
    const hasSite  = /(sito( web)?|vetrina|aziendal|landing|portfolio|blog)/.test(t);
    const hasPrice = /(prezz|cost|quanto|preventiv|tariff)/.test(t);
    const hasLead  = /(contatt|telefono|whatsapp|chiam|numero)/.test(t);
    const hasServ  = /(serviz|cosa.*fate|offrit|aiutate)/.test(t);
    const hasBrand = /(logo|brand(ing)?|immagine\s*coordinata|brand\s*kit|brandkit|grafica)/.test(t);

    if (hasSite && hasBrand) {
      return `Possiamo occuparci sia del <b>sito</b> sia del <b>logo/brand kit</b>.<br>
        • Pacchetti Sito 👉 <a class="underline" href="${URL_SITI}">Siti Web</a><br>
        • Branding/Logo 👉 <a class="underline" href="${URL_BRAND}">Branding & Grafica</a><br>
        Se vuoi, ti proponiamo un pacchetto coordinato sito + identità visiva.`;
    }

    if (hasEcom && hasBrand) {
      return `Perfetto: <b>e-commerce</b> con <b>logo/brand kit</b> ✨<br>
        • Pacchetti E-commerce 👉 <a class="underline" href="${URL_ECOM}">E-commerce</a><br>
        • Branding/Logo 👉 <a class="underline" href="${URL_BRAND}">Branding & Grafica</a>`;
    }

    if (hasBrand) {
      return `Per <b>logo</b>, palette e <b>brand kit</b> trovi tutto qui 👉
        <a class="underline" href="${URL_BRAND}">Branding & Grafica</a>.<br>
        Possiamo coordinare immagine e sito per un lancio coerente.`;
    }

    if (hasEcom) {
      return `Ottimo! Per l’<b>E-commerce</b> trovi pacchetti & prezzi qui 👉
        <a class="underline" href="${URL_ECOM}">Pacchetti & Prezzi E-commerce</a>.<br>
        Dimmi volumi prodotti e funzioni (varianti, pagamenti, spedizioni…) e ti suggerisco il piano.`;
    }

    if (hasSite) {
      return `Per i <b>siti vetrina/aziendali</b> trovi tutto qui 👉
        <a class="underline" href="${URL_SITI}">Pacchetti & Prezzi Siti Web</a>.<br>
        Posso aiutarti a scegliere in base a pagine e obiettivi.`;
    }

    if (hasPrice) {
      return `Ecco i prezzi e cosa include ogni pacchetto:<br>
        • <b>Siti Web</b> 👉 <a class="underline" href="${URL_SITI}">Pacchetti & Prezzi</a><br>
        • <b>E-commerce</b> 👉 <a class="underline" href="${URL_ECOM}">Pacchetti & Prezzi</a>`;
    }

    if (hasLead) {
      const wa = document.getElementById('ls-chat-panel')?.dataset.wa || '#';
      return `📞 <a class="underline" href="tel:+393403223494">340 322 3494</a> ·
        WhatsApp 👉 <a class="underline" href="${wa}" target="_blank" rel="noopener">Apri</a><br>
        Oppure scrivici da <a class="underline" href="/contatti">Contatti</a>.`;
    }

    if (hasServ) {
      return `Qui trovi tutti i servizi 👉 <a class="underline" href="/servizi">/servizi</a>.
        Dimmi pure cosa ti serve e ti indico la pagina giusta.`;
    }

    return `Grazie! Ti rispondiamo il prima possibile negli orari indicati.
      Intanto puoi dare un’occhiata ai pacchetti:<br>
      👉 <a class="underline" href="${URL_SITI}">Siti Web</a> ·
      <a class="underline" href="${URL_ECOM}">E-commerce</a>`;
  }

  // ===== Intent tag per i lead =====
  function detectIntentTag(t='') {
    t = norm(t);
    if (/(logo|brand(ing)?|immagine\s*coordinata|brand\s*kit|grafica)/.test(t)) return 'branding';
    if (/(e-?commerce|shop|woocommerce)/.test(t)) return 'ecommerce';
    if (/(sito( web)?|vetrina|aziendal|landing|blog)/.test(t)) return 'siti';
    if (/(prezz|preventiv|tariff)/.test(t)) return 'prezzi';
    if (/(contatt|telefono|whatsapp|chiam|numero)/.test(t)) return 'contatti';
    return 'generico';
  }

  // ===== Bind/logic =====
  function bindChat(){
    const root   = document.getElementById('ls-chat-widget');
    if (!root) return;

    if (root.parentElement !== document.body) document.body.appendChild(root);
    root.style.zIndex = '99999';
    if (root.dataset.bound === '1') return;
    root.dataset.bound = '1';

    const panel  = document.getElementById('ls-chat-panel');
    const toggle = document.getElementById('ls-chat-toggle');
    const closeB = document.getElementById('ls-chat-close');

    const body     = document.getElementById('ls-chat-body');
    const messages = document.getElementById('ls-messages');
    const form     = document.getElementById('ls-composer');
    const input    = document.getElementById('ls-input');

    const gate     = document.getElementById('ls-gate');
    const nameI    = document.getElementById('ls-name');
    const emailI   = document.getElementById('ls-email');
    const saveProf = document.getElementById('ls-save-profile');

    const setOpen = (v)=>{ panel?.setAttribute('data-open', v?'true':'false'); panel?.classList.toggle('hidden', !v); STORE.open = !!v; persist(); };
    const isOpen  = ()=> panel?.getAttribute('data-open') === 'true';
    const scrollDown = ()=> { messages && (messages.scrollTop = messages.scrollHeight); };

    const bot = (html)=>{ STORE.messages.push({ role:'bot', html }); persist();
      messages.insertAdjacentHTML('beforeend', `<div class="flex"><div class="ls-bubble ls-bot">${html}</div></div>`); scrollDown(); };
    const you = (text)=>{ STORE.messages.push({ role:'user', content:text }); persist();
      messages.insertAdjacentHTML('beforeend', `<div class="flex justify-end"><div class="ls-bubble ls-you">${esc(text)}</div></div>`); scrollDown(); };

    const renderFromStore = ()=>{
      messages.innerHTML = '';
      for (const m of STORE.messages) {
        if (m.role === 'user')
          messages.insertAdjacentHTML('beforeend', `<div class="flex justify-end"><div class="ls-bubble ls-you">${esc(m.content)}</div></div>`);
        else
          messages.insertAdjacentHTML('beforeend', `<div class="flex"><div class="ls-bubble ls-bot">${m.html}</div></div>`);
      }
      messages.querySelectorAll('a[href]').forEach(a => a.addEventListener('click', ()=>{
        if (isMobile()) { setOpen(false); } else { STORE.open = true; persist(); }
      }));
      scrollDown();
    };

    const needGate = () => (
      "${PUBLIC_CHAT_REQUIRE_EMAIL}" === "true" &&
      !(STORE.profile && STORE.profile.email)
    );

    const initGateOrChat = ()=>{
      if (needGate()) {
        gate.classList.remove('hidden');
        body.classList.add('hidden');
      } else {
        gate.classList.add('hidden');
        body.classList.remove('hidden');
        if (STORE.messages.length === 0) bot("Ciao! 👋 Come posso aiutarti?");
        else renderFromStore();
      }
    };

    const openPanel  = ()=> { setOpen(true); initGateOrChat(); };
    const closePanel = ()=> setOpen(false);

    toggle?.addEventListener('click', ()=> isOpen()? closePanel(): openPanel());
    closeB?.addEventListener('click', closePanel);
    document.addEventListener('click', (e)=>{ if (isOpen() && !root.contains(e.target)) closePanel(); });

    // Salva profilo + POST opzionale
    saveProf?.addEventListener('click', async ()=>{
      const name  = (nameI?.value || '').trim();
      const email = (emailI?.value || '').trim();
      if (!name || !/.+@.+\..+/.test(email)) { alert('Inserisci nome ed email validi.'); return; }
      STORE.profile = { name, email }; STORE.messages = []; persist();
      try {
        await fetch('/api/chat-profile', {
          method:'POST',
          headers:{'content-type':'application/json'},
          body: JSON.stringify({ name, email })
        });
      } catch {}
      gate.classList.add('hidden'); body.classList.remove('hidden');
      bot(`Ciao ${esc(name)}! 👋 Come posso aiutarti?`);
    });

    // Invio messaggio
    form?.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const msg = (input?.value || '').trim();
      if (!msg) return;
      if (input) input.value = '';
      you(msg);
      bot(autoReply(msg));

      // invio lead “in background” con intent
      try {
        const prof = STORE.profile || {};
        const intent = detectIntentTag(msg);
        await fetch('/api/lead', {
          method:'POST',
          headers:{'content-type':'application/json'},
          body: JSON.stringify({
            channel: 'web',
            name: prof.name || 'Chat user',
            email: prof.email || undefined,
            message: msg,
            meta: { source: 'chat-assistant', path: location.pathname, intent }
          })
        });
      } catch {}
    });

    // Ripristina stato (solo desktop)
    if (STORE.open && !isMobile()) { setOpen(true); initGateOrChat(); renderFromStore(); }

    // Mobile: chiudi al cambio pagina
    const closeOnNavIfMobile = ()=> { if (isMobile()) setOpen(false); };
    document.addEventListener('astro:after-swap', closeOnNavIfMobile);
    document.addEventListener('astro:page-load', closeOnNavIfMobile);
    mqMobile.addEventListener?.('change', e => { if (e.matches) setOpen(false); });
  }

  document.addEventListener('astro:page-load', bindChat);
  document.addEventListener('astro:after-swap', bindChat);
  if (document.readyState !== 'loading') bindChat(); else document.addEventListener('DOMContentLoaded', bindChat);
</script>