---
import { UI } from 'astrowind:config';
---

<!-- Theme + header/menu/script base (idempotente tramite window.basic_script) -->
<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    // Evita doppie inizializzazioni in caso di navigazioni client-side
    return;
  }
  window.basic_script = true;

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (!matches) return;
    const list = matches.length === undefined ? [matches] : matches;
    list.forEach((elem) => {
      elem.addEventListener(event, (e) => fn(e, elem), false);
    });
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      const header = document.getElementById('header');
      header?.classList.remove('h-screen', 'expanded', 'bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      const header = document.getElementById('header');
      header?.classList.toggle('h-screen');
      header?.classList.toggle('expanded');
      header?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) return;
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url') || location.href);
      const text = encodeURIComponent(elem.getAttribute('data-aw-text') || document.title);

      let href;
      switch (network) {
        case 'facebook': href = `https://www.facebook.com/sharer.php?u=${url}`; break;
        case 'twitter':  href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`; break;
        case 'linkedin': href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`; break;
        case 'whatsapp': href = `https://wa.me/?text=${text}%20${url}`; break;
        case 'mail':     href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`; break;
        default: return;
      }

      const a = document.createElement('a');
      a.target = '_blank';
      a.rel = 'noopener';
      a.href = href;
      a.click();
    });

    const screenSize = window.matchMedia('(max-width: 767px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      const header = document.getElementById('header');
      header?.classList.remove('h-screen', 'expanded', 'bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;
      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };

  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
    document.body.classList.remove('overflow-hidden');
    const header = document.getElementById('header');
    header?.classList.remove('h-screen', 'expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });
</script>

<!-- IntersectionObserver (namespacizzato e idempotente) -->
<script is:inline>
  (() => {
    // Namespace globale del sito
    window.__LS = window.__LS || {};

    // Crea singleton solo la prima volta
    if (!window.__LS.Intersect) {
      window.__LS.Intersect = {
        observer: null,
        delayBetweenAnimations: 100,
        animationCounter: 0,

        _select() {
          const selectors = [
            '[class*=" intersect:"]',
            '[class*=":intersect:"]',
            '[class^="intersect:"]',
            '[class="intersect"]',
            '[class*=" intersect "]',
            '[class^="intersect "]',
            '[class$=" intersect"]',
          ];
          return Array.from(document.querySelectorAll(selectors.join(',')));
        },

        _getThreshold(el) {
          if (el.classList.contains('intersect-full')) return 0.99;
          if (el.classList.contains('intersect-half')) return 0.5;
          if (el.classList.contains('intersect-quarter')) return 0.25;
          return 0;
        },

        _prepare(elements) {
          elements.forEach((el) => {
            el.setAttribute('no-intersect', '');
            el.dataset.intersectionThreshold = String(this._getThreshold(el));
          });
        },

        _callback(entries) {
          entries.forEach((entry) => {
            requestAnimationFrame(() => {
              const target = entry.target;
              const threshold = parseFloat(target.dataset.intersectionThreshold || '0');
              const ratio = entry.intersectionRatio;

              // Nessuna coda: entra/esce senza delay
              if (target.classList.contains('intersect-no-queue')) {
                if (entry.isIntersecting) {
                  target.removeAttribute('no-intersect');
                  if (target.classList.contains('intersect-once')) {
                    this.observer.unobserve(target);
                  }
                } else {
                  target.setAttribute('no-intersect', '');
                }
                return;
              }

              if (ratio >= threshold) {
                if (!target.hasAttribute('data-animated')) {
                  target.removeAttribute('no-intersect');
                  target.setAttribute('data-animated', 'true');

                  const delay = this.animationCounter * this.delayBetweenAnimations;
                  this.animationCounter++;

                  target.style.transitionDelay = `${delay}ms`;
                  target.style.animationDelay = `${delay}ms`;

                  if (target.classList.contains('intersect-once')) {
                    this.observer.unobserve(target);
                  }
                }
              } else {
                target.setAttribute('no-intersect', '');
                target.removeAttribute('data-animated');
                target.style.transitionDelay = '';
                target.style.animationDelay = '';
                this.animationCounter = 0;
              }
            });
          });
        },

        start() {
          // Support check
          if (!('IntersectionObserver' in window)) return;

          // Se esiste già, resetta per evitare doppie osservazioni
          if (this.observer) {
            try { this.observer.disconnect(); } catch {}
            this.observer = null;
          }

          const elements = this._select();
          if (!elements.length) return;

          this._prepare(elements);

          this.observer = new IntersectionObserver(
            this._callback.bind(this),
            { threshold: [0, 0.25, 0.5, 0.99] }
          );

          elements.forEach((el) => this.observer.observe(el));
        },
      };

      // Alias di compatibilità: espone window.Observer solo se assente
      if (typeof window.Observer === 'undefined') {
        Object.defineProperty(window, 'Observer', {
          get() { return window.__LS.Intersect; },
          configurable: true,
        });
      }
    }

    // Avvio iniziale (DOM già pronto in Astro)
    window.__LS.Intersect.start();

    // Binda una sola volta l’handler per le navigazioni client-side
    if (!window.__LS._intersectAfterSwapBound) {
      document.addEventListener('astro:after-swap', () => {
        window.__LS.Intersect.start();
      });
      window.__LS._intersectAfterSwapBound = true;
    }
  })();
</script>