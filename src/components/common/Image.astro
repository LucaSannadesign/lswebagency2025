---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '@/utils/images';
import {
  getImagesOptimized,
  astroAsseetsOptimizer,   // ← usa l'export esistente nel tuo file utils
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '@/utils/images-optimization';

type Props = ImageProps;
type ImageType = {
  src: string;
  attributes: HTMLAttributes<'img'>;
};

const baseProps = Astro.props as Props;

// accessibilità: alt obbligatorio (consenti anche alt="")
if (baseProps.alt === undefined || baseProps.alt === null) {
  throw new Error('[Image] attributo "alt" richiesto (usa alt="" per immagini decorative).');
}

// risolvi sorgente (ESM asset, /public path, o URL remoto)
const resolved = await findImage(baseProps.src);
const isRemote = typeof resolved === 'string' && /^https?:\/\//i.test(resolved);
const isEsmAsset = !!resolved && typeof resolved === 'object' && 'src' in resolved;

// default non bloccanti
const loading = baseProps.loading ?? 'lazy';
const decoding = baseProps.decoding ?? 'async';

// dimensioni: fallback SOLO se NON ESM (evita distorsioni)
let width = baseProps.width;
let height = baseProps.height;
if (!isEsmAsset) {
  width = width ?? 1792;
  height = height ?? 1024;
}

// props per l'optimizer
const optProps: ImageProps = {
  ...baseProps,
  width,
  height,
  loading,
  decoding,
};

let image: ImageType | undefined;

if (isRemote && isUnpicCompatible(resolved as string)) {
  image = await getImagesOptimized(resolved as string, optProps, unpicOptimizer);
} else if (resolved) {
  // ESM asset o path locale gestito dall'optimizer Astro
  image = await getImagesOptimized(resolved as any, optProps, astroAsseetsOptimizer);
}

// fallback: se l'optimizer non produce output, renderizza comunque <img>
const fallbackSrc = isEsmAsset
  ? (resolved as any).src
  : isRemote
    ? (resolved as string)
    : String(baseProps.src);

const fallbackAttrs: HTMLAttributes<'img'> = {
  alt: baseProps.alt as string,
  width,
  height,
  loading,
  decoding,
  style: baseProps.style as any,
  class: baseProps.class as any,
};
---

{image ? (
  <img
    src={image.src}
    {...image.attributes}
    {...(isRemote ? { crossorigin: 'anonymous', referrerpolicy: 'no-referrer' } : {})}
  />
) : (
  <img
    src={fallbackSrc}
    {...fallbackAttrs}
    {...(isRemote ? { crossorigin: 'anonymous', referrerpolicy: 'no-referrer' } : {})}
  />
)}